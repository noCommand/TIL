캘린더를 많이 쓰게 하기 위해
챗봇을 도입

형태소 - 문법단위로 쪼갤수 있는 가장 작은 단위

형태소 분석을 해서 자연어 처리를 한다.

카톡기반의 챗봇이랑 안드로이드 앱이랑 연동되게 할것이다.

인공지능 시장이 점점 커지고 있는데 쳇봇에

인공지능 알고리즘을 도입할것이다 딥러닝 머신러닝

인공지능 시장이 성장할것이다.


ITEF에서 표준을 만든다.
RFC문서를 만들어서 표준으로만들고싶다 하면
draft상태가 되는데
하고싶은사람이 많으면 계속 더 좋은방면으로 수정된다

Internet Calendaring and schaduling core
인터넷 캘린더 스케쥴링 핵심 규격

onoffmix같은데를 파싱을 해서 캘린더에 추가한다

온오프믹스 스팩업 플레이디비(인터파크 자회사
네이버 다음 뮤지컬 영화 연극 이런일정정보를 여기서 제고하므로
여기를 파싱해서 공연 일정 정보 등을 가지고 온다.) ->
서버 -> 사용자

spider로 가져와서

우리 구글캘린더로 가지고 온다
여기서 이제 우리서버에서 가지고 온다.

왜 바로 안가지고오느냐 - 우리 서버에 저장을 하면
순수 파싱한 정보들이 정말정확하게 파싱이 되었다고 보자알 수 가 없다
잘못된 데이터, 애초에 올라온 정보들이 잘못된 정보일 수도 있으니까
그거에 대한걸 우리 구글 캘린더에서 한번 검수를 한다.
직접
구글캘린더 UI를 쓰는 이유는 UI가 되게 잘되어잇음

서버에서 볼수있긴한데

우리 db를 사용하다가, 장애가 생겨서 날라갈수있으니
백업용도로도 구글 캘린더에 넣는다.

따라서 관리와백업용도


보여주기면 정보 제공밖에 되는게 없는데

우리가 뭘하ㄴ
추천(맞춤형)
개인화한다. 사용자에 맞는 데이터를 추천해주는것

provided된 데이터가 뭐야?
일정들이 매우많은데
사용자들에게 맞는 일정을 줘야하는데
맞게 주는 알고리즘을 해야한다.

이미 있는 알고리즘 netflex에서 나온 collaborative-filternif
이라느게 있는데 켈린더에 맞게 다시 알고리즘을 짜야한다.

chatbot
사용자는 app을 쓸수도있고 챗봇을쓸수도있다

사용자가 캘린더어플을 사용을 많이 쓰게 해야 좋은데
이걸 어떻게하면 많이 사용할까 해서
chatbot을 사용하면 좋겠다 생각해서
일정관리기능을 제공하면 사용자가 더 재밌게 일정을 관리할 수 있지 않을까 해서

* 인프라 - 인프라 스트럭쳐의 줄임말 - 기초가 되는 사업을 인프라라한다.

뭐냐면 - 기간산업을 인프라라고한다. (산업에 토대가 되는 산업(기초산업))
기차, 항만 -> 이런걸 통해야 사업이되지

사무실을 세웠지 전기 컴퓨터 전화 막 이런걸 준비하는것도 인프라라고한다.

어플리케이션 IT 서비스를 만들때
서버실 - 전기 인터넷 이런 인프라를 구축해야함
우리가 서버 컴퓨터를 들였으면 os깔고 이거저거 해야하는거
이게 다 인프라
서버 구축 - AWS  - 클라우드임 - 클라우드 서비스
클라우드 인프라를 구축함

호스팅 - 서버 대여
클라우드는 - 추상적인 개념이라 클라우드
클라우드내부에있는건 몰라도되고 그냥 서버컴퓨터만 쓸수만 있으면 됨
서버컴퓨터를 만들어주세요 하면 가상화된 서버를 준다.
요청 응답형식으로 HTTP로 통신을 할수있는 api를 제공해준다.

AWS의 EC2 서비스 이걸로 서버를 팠음
클라우드에다가 EC2를 파고

그 서버컴퓨터에다가 우리는 docker를 깔고 (배포를 편하게 하기 위해서)

로컬머신에서 서버컴퓨터로 앱을 뿌리는걸 배포라고한다.
로컬머신에서 스프링 자바 이런거 깔고 만들고, 배포하려면 서버컴퓨터에도 동시에 똑같은 환경이 구성되어있어야한다.
기 귀찮음을 막기위해 도커를 깐다.

도커 - 이미지를 만들어서 자바깔고 내가 개발한 스프링 웹 어플리케이션을 깔았다. 이거를 그냥 서버에다가만 배포를
하면 된다. 그러면 서버에다가 일일이 깔 필요가 없다. (인프라 구축을 할 필요가 없다.)

이 이미지들을 실행만 시키면 된다.

AWS EC2에 자바를 깔고 우분투 리눅스 깔음
그래서 spring boot로 돌아가게 구축을 했다

spring으로는 api 서버를 짰다 - 그리고 실행시킴
이건 JAVA8기반의 환경을 구축함


 도커이미지를 만들고 EC2로 판 가상 서버컴퓨터에다가 배포를 했다
우분투 리눅스 자바8 스프링으로 개발한 api를 배포했다

AWS RDS-Mysql 서버를 띄우고 싶은데 이거를 서버컴퓨터 리눅스깔고 mysql깔고 귀찮은 짓을 안하고싶어서
aws에서 만들어진 rds를 사용해서 구축을 했다.
mysql oracle mssql 이런걸 버튼 몇번으로 띄울 수 있다.

content delivery resource (static resource를 보내려고 //html javascript 이미지 )
CDN을 하려고(만들려고) S3를 만들었다
이미지파일 저장

AWS S3 - object storage service를 구축 = 인프라정보랑 (메타데이터) 실제 파일을 합친게 오브젝트 스토리지..
데이터는 서버컴퓨터에서 가져오고
이미지 같은건 다른데서 가져옴 - 분산적으로 처리해서 트레픽부하가 적음 (이건 추상적인거)

<-> block device - 블락단위로 저장을 해주는 디바이스
대표적인거 - 하드디스크 - 페이징 이런 실제 디스크 개념들을 소프트웨어에서 나눈 개념을 블락이라고한다.
(하드 SSD 이런거)
파일 이름만 알면 바로 저장할 수있음

S3와 EBS는 반대

load(부하) balancer 균형 서버2개
서버 2개파는 이유
서버 하나 죽으면 못쓰니까
터지는걸, 서버장애 이런걸 재해라고한다
이런 재해를 복구한걸 재해 복구라고한다.

High availablility 높은 가용성
 HA - 서버가 터지지 않고 무한히 늘리는거
 이런걸 load balancer가 한다

                                                            www.1df.kr
사용자가 들어오면 (LoadBalancer)이 - 여러개중 하나로 물려준다  - www.2df.kr
                                                            www.3df.kr

vpn은 내 컴퓨터에서 다른 컴퓨터로 네트워크를 묶을수 없는데
vpn을
가상 사설 망


ci
서비스를 하면서 문제가 발생하면 문제해결해야하는데 이걸 운영이라고함
운영은 operation(ops)이고 개발은 development(dev)
it service는 이 두개로 만들어진다.

- 소프트웨어 개발 방법론 -
요구사항 분석 - 클라이언트가 얘기함 의견수렴하고 의견조율..
설계          -
구현            - 코딩 implementation
그리고 test        -테스트 자동화
출시 또는 배포        -



가운데 반복하는거 설계구현테스트를 반복하는 단위를 주기라고 하고 이걸 sprint라고 한다
이게 agile 방법론이라고한다.

water fall 이라는 agile방법론

asyil  애자일 방법론

UML - 클래스구조 - 어플리케이션 구조를 짤때
ERD - DB구조짤때


ci continus integration
지속적 통합
테스트를 통과했는지 통과안했는지
어떤부분이 통과했는지 안했는지
dev ops 개념으로 슬랙이나 그런데에 뜨게하는거





----------------------------------------------------------------------------------------------------------------------------------





1. AWS 클라우드를 이용한 서버 어플리케이션 인프라를 구축

  <AWS EC2를 이용한 가상서버 생성>
  1. 우분투 리눅스가 설치된 가상서버 생성
  2. 해당 가상서버에 도커 설치
  3. 개발용 PC에서 생성해놓은 도커 이미지를 해당 가상서버에 배포
  4. LB 이용해서 여러대의 가상서버 클러스터링
  5. Spring Boot 어플리케이션 배포 / Elastic Search 설치 / Redis 설치

  <AWS RDS를 이용한 MySQL 데이터베이스 구축>
  1. MySQL 데이터베이스 구축

  <AWS S3를 이용한 CDN 서버 구축>
  1. 이미지, 자바스크립트, HTML 파일들을 S3에 업로드 테스트해봄
  --> AWS에서 제공하는 Python용 SDK를 사용해서 파일 업로드를 테스트해봤다.


2. Github를 이용한 버전관리 시스템 구축
--> Git으로 어플리케이션 개발 시 Commit & Push 하여 현재 상태 기록
--> 오류와 같은 문제 발생 시 Revert 하여 이전버전으로 복구

 -- 너가 한거: Git으로 로컬 레포지터리 구축하고 Github 연동함


3. Jenkins를 이용한 배포 서버 구축
--> Github랑 연동하여 개발한 소스코드가 Push 되면 자동으로 서버에 배포해줌
